{"version":3,"sources":["components/loader.js","components/canvas.js","components/interface.js","App.js","serviceWorker.js","index.js"],"names":["Loader","props","class","Component","Canvas","svgUrl","src","loader","Interface","setMultiplierAmount","e","setState","multiplier","target","value","setSvgUrl","url","getSvgPng","download","document","querySelector","saveSvgAsPng","scale","state","Fragment","className","for","placeholder","name","type","onChange","this","defaultValue","uk-tooltip","style","onClick","color","href","App","setSvgLink","Url","svgLink","ignorePanzoom","element","getElementById","panzoom","pause","console","log","startPanzoom","resume","id","onMouseLeave","onMouseEnter","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wRAiBeA,E,YAdb,WAAYC,GAAQ,qEACZA,I,sEAIN,OACA,yBAAKC,MAAM,OACT,yBAAKA,MAAM,e,GARIC,aCQNC,EALA,SAACH,GAAW,IACjBI,EAAWJ,EAAXI,OACR,OAAQ,kBAAC,IAAD,CAAKC,IAAKD,EAAQE,OAAQ,kBAAC,EAAD,S,gBCmErBC,G,kBArEb,WAAYP,GAAQ,IAAD,8BACjB,4CAAMA,KAMRQ,oBAAsB,SAACC,GACrB,EAAKC,SAAS,CACZC,WAAYF,EAAEG,OAAOC,SATN,EAcnBC,UAAY,SAACL,GACM,kBAANA,EACT,EAAKT,MAAMe,IAAIN,EAAEG,OAAOC,OACF,kBAANJ,GAChB,EAAKT,MAAMe,IAAIN,IAlBA,EAsBnBO,UAAY,WACV,IAAIC,EAAWC,SAASC,cAAc,gBACtCC,uBAAaH,EAAU,gBAAiB,CAACI,MAAO,EAAKC,MAAMX,cAtB3D,EAAKW,MAAQ,CACXX,WAAY,GAHG,E,sEA4BjB,OACE,kBAAC,IAAMY,SAAP,KACE,2BACCC,UAAU,gBACVC,IAAI,OAFL,sCAKA,2BACED,UAAU,WACVE,YAAY,UACZC,KAAK,MACLC,KAAK,OACLC,SAAUC,KAAKhB,UACfiB,aAAa,KAGf,2BACCC,aAAW,2EACXR,UAAU,gBACVC,IAAI,cAHL,uBAIsB,0BAAMQ,MAAO,CAAC,YAAa,SAA3B,uCAEtB,2BACET,UAAU,WACVE,YAAY,KACZC,KAAK,aACLC,KAAK,SACLC,SAAUC,KAAKtB,oBACfuB,aAAa,MAGf,4BAAQG,QAASJ,KAAKd,UAAWQ,UAAU,8BAA8BS,MAAO,CAAEE,MAAO,UAAzF,YAIA,uBAAGC,KAAK,kDAAiD,0BAAMnC,MAAM,wBAAZ,gB,GAhEzCC,c,gBCgFTmC,E,YA7CX,WAAYrC,GAAQ,IAAD,8BACf,4CAAMA,KAMVsC,WAAa,SAACC,GACV,EAAK7B,SAAS,CAAE8B,QAASD,KARV,EAYnBE,cAAgB,SAAChC,GACb,IAAMiC,EAAUxB,SAASyB,eAAe,SACrBC,IAAQF,GAChBG,QACXC,QAAQC,IAAI,UAhBG,EAmBnBC,aAAe,SAACvC,GACZ,IAAMiC,EAAUxB,SAASyB,eAAe,SACrBC,IAAQF,GAChBO,SACXH,QAAQC,IAAI,WArBZ,EAAKzB,MAAQ,CACTkB,QAAS,6EAHE,E,sEA4BjB,OACE,kBAAC,IAAMjB,SAAP,KACE,yBAAK2B,GAAG,kBACN,yBAAKA,GAAG,YACN,kBAAC,EAAD,CAAWnC,IAAKe,KAAKQ,eAGzB,yBAAKY,GAAG,cAAcC,aAAcrB,KAAKW,cAAeW,aAActB,KAAKkB,cACzE,yBAAKE,GAAG,SACN,kBAAC,EAAD,CAAQ9C,OAAQ0B,KAAKR,MAAMkB,iB,GAtCvBtC,aC1BEmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASzC,SAASyB,eAAe,SD6H3C,kBAAmBiB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.e1688026.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Loader extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n render() {\n    return (\n    <div class=\"box\">\n      <div class=\"plane\"></div>\n    </div>\n    );\n  }\n}\n\n\nexport default Loader;\n","import React from 'react';\nimport SVG from 'react-inlinesvg';\nimport Loader from './loader';\n\n\nconst Canvas = (props) => {\n  const { svgUrl } = props;\n  return (<SVG src={svgUrl} loader={<Loader />} />);\n};\n\nexport default Canvas;\n","import React, { Component } from \"react\";\nimport { saveSvgAsPng } from 'save-svg-as-png';\nimport UIkit from \"uikit\";\n\nclass Interface extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      multiplier: 3, // Default corruption multiplier\n    };\n  }\n\n  setMultiplierAmount = (e) => {\n    this.setState({\n      multiplier: e.target.value\n    });\n  };\n\n\n  setSvgUrl = (e) => {\n    if (typeof e === \"object\") {\n      this.props.url(e.target.value);\n    } else if (typeof e === \"string\") {\n      this.props.url(e);\n    }\n  };\n\n  getSvgPng = () => {\n    let download = document.querySelector(\"#scene > svg\");\n    saveSvgAsPng(download, \"corrupted.png\", {scale: this.state.multiplier});\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <label\n         className=\"uk-form-label\"\n         for=\"url\">\n          Load SVG from URL or paste markup.\n        </label>\n        <input\n          className=\"uk-input\"\n          placeholder=\"SVG URL\"\n          name=\"url\"\n          type=\"text\"\n          onChange={this.setSvgUrl}\n          defaultValue=\"\"\n        />\n\n        <label\n         uk-tooltip=\"title: The higher the scale the longer it will take to render.; pos:left\"\n         className=\"uk-form-label\"\n         for=\"multiplier\">\n          Output image scale. <span style={{\"font-size\": \"10px\"}}>(Browser may freeze for a second.)</span>\n        </label>\n        <input\n          className=\"uk-input\"\n          placeholder=\"3x\"\n          name=\"multiplier\"\n          type=\"number\"\n          onChange={this.setMultiplierAmount}\n          defaultValue=\"3\"\n        />\n\n        <button onClick={this.getSvgPng} className=\"uk-button uk-button-default\" style={{ color: 'white' }}>\n          Download\n        </button>\n        \n        <a href=\"https://github.com/x8BitRain/svg-emoji-corrupt\"><span class=\"uk-label label-react\">GitHub</span></a>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Interface;\n","/* eslint-disable */\n\n// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\nimport ReactDOM from 'react-dom';\nimport React, { Component } from 'react';\nimport Canvas from './components/canvas';\nimport './assets/stylesheets/application.scss';\nimport Interface from './components/interface';\nimport panzoom from 'panzoom';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            svgLink: \"https://upload.wikimedia.org/wikipedia/commons/f/fd/Ghostscript_Tiger.svg\"\n        };\n    }\n\n    setSvgLink = (Url) => {\n        this.setState({ svgLink: Url })\n    }\n\n\n    ignorePanzoom = (e) => {\n        const element = document.getElementById('scene');\n        const controller = panzoom(element);\n        controller.pause();\n        console.log(\"pause\");\n    }\n\n    startPanzoom = (e) => {\n        const element = document.getElementById('scene');\n        const controller = panzoom(element);\n        controller.resume();\n        console.log(\"resume\");\n    }\n\n\n    render () {\n      return (\n        <React.Fragment>\n          <div id=\"controls-panel\" >\n            <div id=\"controls\">\n              <Interface url={this.setSvgLink} />\n            </div>\n          </div>\n          <div id=\"outer-scene\" onMouseLeave={this.ignorePanzoom} onMouseEnter={this.startPanzoom}>\n            <div id=\"scene\">\n              <Canvas svgUrl={this.state.svgLink}/>\n            </div>\n          </div>\n        </React.Fragment>\n      );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}