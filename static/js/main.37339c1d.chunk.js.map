{"version":3,"sources":["components/interface.js","components/loader.js","components/canvas.js","App.js","serviceWorker.js","index.js"],"names":["style","theSVG","Loader","props","className","Canvas","svgUrl","onReady","id","onLoad","src","svgReady","loader","svgVbBuffer","Interface","setMultiplierAmount","e","setState","multiplier","target","value","setEncoderOptions","encoderOptions","setBgFillColor","backgroundColor","getSvgViewBox","svgVb","getAttribute","split","svgViewBox","x","y","w","h","state","setSvgViewBox","idx","name","setAttribute","setVBOutline","checked","border","setSvgUrl","url","getSvgPng","download","document","querySelector","saveSvgAsPng","scale","getPngDataUri","svgAsPngUri","then","uri","pngDataUri","getSvgDataUri","svgAsDataUri","svgDataUri","copi","navigator","clipboard","writeText","svgContext","inlineCss","vboutline","prevProps","this","getElementById","undefined","createElement","appendChild","type","innerHTML","Fragment","htmlFor","placeholder","onChange","defaultValue","setInlineCss","min","max","onClick","color","href","Component","panzoomStart","App","isSvgReady","ready","console","log","setSvgLink","Url","svgLink","startPanzoom","element","panzoom","onMouseEnter","Boolean","window","location","hostname","match","ReactDOM","render","serviceWorker","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.37339c1d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { saveSvgAsPng, svgAsDataUri, svgAsPngUri } from 'save-svg-as-png';\nlet style;\nlet theSVG;\nlet svgVbBuffer = {};\n\n// TODO\n// Make a function that returns SVG instance\n// Bind Viewbox Inputs to SVG instance viewbox\n// Deploy again\n\nclass Interface extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      svgContext: null,\n      multiplier: 1, // Default scale multiplier\n      encoderOptions: 10,\n      backgroundColor: \"\",\n      inlineCss: \"\",\n      svgViewBox: {},\n      vboutline: {border: '30px solid green'},\n      pngDataUri: '',\n      svgDataUri: ''\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.svgReady !== this.props.svgReady) {\n      theSVG = document.getElementById('mainSVG');\n      this.getSvgViewBox();\n    }\n  }\n\n  setMultiplierAmount = (e) => {\n    this.setState({\n      multiplier: e.target.value\n    });\n  };\n\n  setEncoderOptions = (e) => {\n    this.setState({\n      encoderOptions: (e.target.value)\n    });\n  };\n\n  setBgFillColor = (e) => {\n    this.setState({\n      backgroundColor: (e.target.value)\n    });\n    theSVG.style.backgroundColor = e.target.value;\n  };\n\n  getSvgViewBox = () => {\n    let svgVb = theSVG.getAttribute('viewBox').split(' ');\n    this.setState({\n      svgViewBox: {\n        x: svgVb[0],\n        y: svgVb[1],\n        w: svgVb[2],\n        h: svgVb[3]\n      }\n    }, () => {\n      svgVbBuffer = this.state.svgViewBox;\n    });\n  }\n\n  setSvgViewBox = (e) => {\n    let idx = e.target.name\n    svgVbBuffer[idx] = e.target.value;\n    this.setState({\n      svgViewBox: svgVbBuffer\n    }, () => {\n      let x = this.state.svgViewBox.x;\n      let y = this.state.svgViewBox.y;\n      let w = this.state.svgViewBox.w;\n      let h = this.state.svgViewBox.h;\n      theSVG.setAttribute('viewBox', `${x} ${y} ${w} ${h}`)\n    })\n  }\n\n  setVBOutline = (e) => {\n    e.target.checked ? theSVG.style.border = \"1px solid red\" : theSVG.style.border = null\n  };\n\n  setInlineCss(e) {\n    if (style === undefined) {\n      style = document.createElement('style');\n      theSVG.appendChild(style);\n      style.type = 'text/css';\n    }\n    style.innerHTML = e.target.value\n    // theSVG.setAttribute(\"style\", e.target.value);\n  }\n\n  setSvgUrl = (e) => {\n    if (typeof e === \"object\") {\n      this.props.url(e.target.value);\n    } else if (typeof e === \"string\") {\n      this.props.url(e);\n    }\n  };\n\n  componentDidMount() {\n    // console.log(this.props.svgReady);\n  }\n\n  getSvgPng = () => {\n    let download = document.querySelector(\"#scene > svg\");\n    saveSvgAsPng(download, \n      `svg2png_x${this.state.multiplier}.png`, \n      {\n        scale: this.state.multiplier,\n        encoderOptions: (this.state.encoderOptions / 10),\n        backgroundColor: this.state.backgroundColor,\n      });\n  };\n\n  getPngDataUri = () => {\n    let download = document.querySelector(\"#scene > svg\");\n    svgAsPngUri(download, \n      {\n        scale: this.state.multiplier,\n        encoderOptions: (this.state.encoderOptions / 10),\n        backgroundColor: this.state.backgroundColor,\n      }).then(uri => \n        this.setState({\n          pngDataUri: uri\n        })\n      );\n  };\n\n  getSvgDataUri = () => {\n    let download = document.querySelector(\"#scene > svg\");\n    svgAsDataUri(download).then(uri => \n      this.setState({\n        svgDataUri: uri\n      })\n    );\n  };\n\n  copi = (e) => {\n    navigator.clipboard.writeText(e.target.value);\n    e.target.style.border = '3px solid #00b149';\n  }\n\n\n  render() {\n    return (\n      <React.Fragment>\n        <label\n         className=\"uk-form-label\"\n         htmlFor=\"url\">\n          Load SVG from URL or paste markup.\n        </label>\n        <input\n          className=\"uk-input\"\n          placeholder=\"SVG URL / Markup\"\n          name=\"url\"\n          type=\"text\"\n          onChange={this.setSvgUrl}\n          defaultValue=\"\"\n        />\n\n        <label\n         className=\"uk-form-label\"\n         htmlFor=\"multiplier\">\n          Output image scale. <span style={{\"fontSize\": \"10px\"}}>(Browser may freeze for a second.)</span>\n        </label>\n        <input\n          className=\"uk-input\"\n          placeholder=\"3x\"\n          name=\"multiplier\"\n          type=\"number\"\n          onChange={this.setMultiplierAmount}\n          defaultValue=\"3\"\n        />\n\n        <label\n         className=\"uk-form-label\"\n         htmlFor=\"inlineCss\">\n          Add inline CSS\n        </label>\n        <textarea\n          className=\"uk-input\"\n          placeholder=\"#element { font-family: 'droid-sans' }\"\n          name=\"inlineCss\"\n          type=\"text\"\n          onChange={this.setInlineCss}\n        />\n        <br/>\n\n        <label\n         id=\"outline\"\n         className=\"uk-form-label\"\n         htmlFor=\"SvgViewBoxInput\">\n          ViewBox\n          \n          <label htmlFor=\"vboutline\"><input onChange={this.setVBOutline} type=\"checkbox\" id=\"vboutline\" name=\"vboutline\" />Outline ViewBox</label>\n        </label>\n        <div id=\"SvgViewBoxInput\">\n          \n          <input\n            className=\"uk-input\"\n            placeholder=\"X\"\n            name=\"x\"\n            type=\"number\"\n            value={this.state.svgViewBox.x}\n            onChange={this.setSvgViewBox}\n          />\n          \n          <input\n            className=\"uk-input\"\n            placeholder=\"Y\"\n            name=\"y\"\n            type=\"number\"\n            value={this.state.svgViewBox.y}\n            onChange={this.setSvgViewBox}\n          />\n          \n          <input\n            className=\"uk-input\"\n            placeholder=\"W\"\n            name=\"w\"\n            type=\"number\"\n            value={this.state.svgViewBox.w}\n            onChange={this.setSvgViewBox}\n          />\n          \n          <input\n            className=\"uk-input\"\n            placeholder=\"H\"\n            name=\"h\"\n            type=\"number\"\n            value={this.state.svgViewBox.h}\n            onChange={this.setSvgViewBox}\n          />\n        </div>\n\n        <br/>\n        <label htmlFor=\"bgFillColor\">Background fill color <span style={{\"fontSize\": \"10px\"}}>(Default: Transparent)</span></label>\n        <input \n          value={this.state.backgroundColor}\n          onChange={this.setBgFillColor}\n          type=\"color\" \n          id=\"bgFillColor\" \n          name=\"bgFillColor\"\n        />\n\n        <br/>\n\n        <label\n         className=\"uk-form-label\"\n         htmlFor=\"pngQuality\">\n          PNG Quality\n        </label>\n        <input \n          className=\"uk-range\" \n          min=\"1\" \n          max=\"10\" \n          name=\"pngQuality\" \n          type=\"range\" \n          value={this.state.encoderOptions} \n          onChange={this.setEncoderOptions}\n        />\n        {this.state.encoderOptions}\n        <output htmlFor=\"pngQuality\" />\n\n\n\n        <button onClick={this.getSvgPng} className=\"uk-button uk-button-default\" style={{ color: 'white' }}>\n          Download PNG\n        </button>\n        \n        <button onClick={this.getPngDataUri} className=\"uk-button uk-button-default\" style={{ color: 'white' }}>\n          Get PNG Data URI\n        </button>\n\n        {this.state.pngDataUri ? <input\n          className=\"uk-input\"\n          type=\"text\"\n          defaultValue=\"\"\n          value={this.state.pngDataUri}\n          onClick={this.copi}\n        /> : null}\n        \n\n        <button onClick={this.getSvgDataUri} className=\"uk-button uk-button-default\" style={{ color: 'white' }}>\n          Get SVG Data URI\n        </button>\n\n        {this.state.svgDataUri ? <input\n          className=\"uk-input\"\n          type=\"text\"\n          defaultValue=\"\"\n          value={this.state.svgDataUri}\n          onClick={this.copi}\n        /> : null}\n\n        \n        <a href=\"https://github.com/x8BitRain/svg2png\"><span className=\"uk-label label-react\">GitHub</span></a>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Interface;\n","import React from 'react';\n\nconst Loader = (props) => {\n  return (\n    <div className=\"box\">\n      <div className=\"plane\"></div>\n    </div>\n    );\n};\n\nexport default Loader;\n","import React from 'react';\nimport SVG from 'react-inlinesvg';\nimport Loader from './loader';\n\n\nconst Canvas = (props) => {\n  const { svgUrl, onReady } = props;\n  const svgReady = (src) => {\n    props.onReady(src);\n  }\n  return (<SVG id=\"mainSVG\" onLoad={(src) => svgReady(src)} src={svgUrl} loader={<Loader />} />);\n};\n\nexport default Canvas;\n","/* eslint-disable */\n\nimport React, { Component } from 'react';\nimport Canvas from './components/canvas';\nimport './assets/stylesheets/application.scss';\nimport Interface from './components/interface';\nimport panzoom from 'panzoom';\nlet panzoomStart = false;\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            svgLink: \"https://upload.wikimedia.org/wikipedia/commons/f/fd/Ghostscript_Tiger.svg\",\n            svgReady: false\n        };\n    }\n\n    isSvgReady = (ready) => {\n      console.log(ready);\n      this.setState({\n        svgReady: ready\n      })\n    }\n\n    setSvgLink = (Url) => {\n        this.setState({ svgLink: Url })\n    }\n\n    startPanzoom = (e) => {\n      if (!panzoomStart) {\n        const element = document.getElementById('scene');\n        const controller = panzoom(element);\n        panzoomStart = true;\n      }\n    }\n\n\n    render () {\n      return (\n        <React.Fragment>\n          <div id=\"outer-scene\" onMouseEnter={this.startPanzoom}>\n            <div id=\"scene\">\n              <Canvas svgUrl={this.state.svgLink} onReady={this.isSvgReady}/>\n            </div>\n          </div>\n          <div id=\"controls-panel\" >\n            <div id=\"controls\">\n              <Interface url={this.setSvgLink} svgReady={this.state.svgReady} />\n            </div>\n          </div>\n        </React.Fragment>\n      );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}